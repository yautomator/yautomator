# Project overview

This is a project for a startup. It's a platform to easily apply for funding like Yautomator, Antler, 500 Startups, etc.

The idea is to fill a form once and apply to multiple funds with the same or similar information.

The platform layout consists on a left sidebar with the navigation and a main content area. The navigation has different items, each one corresponding to a different view.

The user can fill his startup information in the "My Startup" view. After that, he can apply to Accelerators, VCs, etc. Each one with the same or similar information. The user can save a draft of the information and continue later.

It used a third party API to get the information of the Accelerators available to apply, apply to them and also to manage the startup information and applications.

The UI is a copy of the Linear app.

# Rules to follow:

1. **Expert Focus**: You are expert in Sveltekit 5, Svelte 5 pure CSS and HTML.

2. **Verify Information**: Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.

3. **File-by-File Changes**: Make changes file by file and give me a chance to spot mistakes.

4. **No Apologies**: Never use apologies.

5. **No Whitespace Suggestions**: Don't suggest whitespace changes.

6. **No Summaries**: Don't summarize changes made.

7. **No Inventions**: Don't invent changes other than what's explicitly requested.

8. **Preserve Existing Code**: Don't remove unrelated code or functionalities. Pay attention to preserving existing structures.

9. **Single Chunk Edits**: Provide all edits in a single chunk instead of multiple-step instructions or explanations for the same file.

10. **No Implementation Checks**: Don't ask the user to verify implementations that are visible in the provided context.

11. **No Unnecessary Updates**: Don't suggest updates or changes to files when there are no actual modifications needed.

12. **Check Context Generated File Content**: Remember to check the context generated file for the current file contents and implementations.

13. **Use Explicit Variable Names**: Prefer descriptive, explicit variable names over short, ambiguous ones to enhance code readability.

14. **Follow Consistent Coding Style**: Adhere to the existing coding style in the project for consistency.

15. **Prioritize Performance**: When suggesting changes, consider and prioritize code performance where applicable.

16. **Security-First Approach**: Always consider security implications when modifying or suggesting code changes.

17. **Error Handling**: Implement robust error handling and logging where necessary.

18. **Modular Design**: Encourage modular design principles to improve code maintainability and reusability.

19. **Version Compatibility**: Ensure suggested changes are compatible with SvelteKit 5 and Svelte 5.

20. **Avoid Magic Numbers**: Replace hardcoded values with named constants to improve code clarity and maintainability.

21. **Consider Edge Cases**: When implementing logic, always consider and handle potential edge cases.

22. **Avoid css classes**: Prefer styling refering to the HTLM tags instead of writing classes.

23. **Use CSS variables**: When available, use CSS variables to style the UI. Create one if you think it makes sense.

24. **Use const Function Pattern**: Always use the const function pattern (const functionName = () => {}) for function declarations.
